#! /usr/bin/env bash

# MIT License
# 
# Copyright (c) 2021 Rebecca Taylor
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -euo pipefail

MULTIBASH_VERSION=1.0.1

which docker &>/dev/null || { echo "Please install Docker to use $0" >&2; exit 1; }

(( $# == 0 )) || [ "$1" = --help ] && { echo "Usage: $0 [BASH version],[BASH version] [command (optional)] [arguments]

If command is provided, it will be run in a Docker container of the specified BASH version(s).
If command is not provided, it will start an interactive BASH session. Use 'exit' to exit.

# Example

  ./multi-bash 3.2.57,5.0 bash --version

    3.2.57
    GNU bash, version 3.2.57(1)-release (x86_64-pc-linux-musl)
    Copyright (C) 2007 Free Software Foundation, Inc.

    5.0
    GNU bash, version 5.0.18(1)-release (x86_64-pc-linux-musl)
    Copyright (C) 2019 Free Software Foundation, Inc.
    License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
    
    This is free software; you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.

# BASH Docker Images

  If the provided BASH versions are not locally installed as Docker container images,
  the container images will be automatically downloaded and installed.
  
  To view all locally installed BASH docker images, run:
  
    docker images | grep ^bash
  
  To remove a locally installed BASH Docker container image for a specific BASH version, run:
  
    docker rmi bash:4.4

# BASH Versions Available

  For a list of available BASH versions, see the bash Docker image on Docker Hub:
  https://hub.docker.com/_/bash

# Configuration

  When the Docker container is run the current directory is mounted inside the container as /app.
  When a command is run, it is executed from the mounted folder, so it is run from inside /app.
  
  Set MULTIBASH_DIR=\"path/to/folder\" to mount a directory other than the current directory.
  Set MULTIBASH_MOUNT=/path to mount the directory as a specific location in the container.
  Set MULTIBASH_WORKDIR=\"path/to/folder\" to run commands from this location *inside* the container.

Visit https://multibash.shellbox.sh for official project documentation.
"; exit 0; }

version="$1"
shift

if [[ "$version" = *,* ]]
then
  IFS=, read -ra versions <<< "$version"
  for version in "${versions[@]}"
  do
    "$0" "$version" "$@"
    echo
  done
else
  [[ "$version" =~ ^[0-9] ]] || { echo "BASH version must start with a number: '$version'" >&2; exit 1; }

  environmentVariables=""
  while (( $# > 0 )) && [[ "$1" =~ ^([^=]+)=(.+)$ ]]
  do
    environmentVariables+=" -e $1"
    shift
  done

  folderToMount="${MULTIBASH_DIR:-$PWD}"
  locationToMount="${MULTIBASH_MOUNT:-/app}"
  workingDirectory="${MULTIBASH_WORKDIR:-$locationToMount}"

  if ! docker images bash --format "{{.Tag}}" | grep "$version" >&2
  then
    echo "BASH image not installed locally for version: $version"
    echo
    echo "Pulling image from Docker Hub..."
    docker pull "bash:$version"
    (( $? == 0 )) || { echo "Docker pull failed" >&2; exit 1; }
    echo
  fi

  startCommand=
  (( $# == 0 )) && startCommand=bash

  docker run --rm -it \
    -v "$folderToMount:$locationToMount" \
    -w "$workingDirectory" $environmentVariables \
    "bash:$version" $startCommand "$@"
fi
